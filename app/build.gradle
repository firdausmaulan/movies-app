apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: "kotlin-kapt"

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "com.movies.app"
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        buildConfigField "String", "BASE_URL", "\"${loadSecret("BASE_URL")}\""
        buildConfigField "String", "SOURCE_URL", "\"${loadSecret("SOURCE_URL")}\""
        buildConfigField "String", "VIDEO_URL", "\"${loadSecret("VIDEO_URL")}\""
        buildConfigField "String", "API_KEY", "\"${loadSecret("API_KEY")}\""
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.anko:anko-commons:$anko_version"
    implementation "com.android.support:appcompat-v7:$support_version"
    implementation "com.android.support:recyclerview-v7:$support_version"
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation "com.android.support:support-vector-drawable:$support_version"
    implementation "com.android.support:design:$support_version"
    implementation "com.android.support:cardview-v7:$support_version"
    implementation "com.google.code.gson:gson:2.8.5"
    implementation "com.github.bumptech.glide:glide:4.7.1"
    implementation 'com.amitshekhar.android:android-networking:1.0.2'
    testImplementation 'junit:junit:4.12'
    // required if you want to use Mockito for unit tests
    testImplementation 'org.mockito:mockito-core:2.8.47'
    // required if you want to use Mockito for Android tests
    androidTestImplementation 'org.mockito:mockito-android:2.8.47'
    // Android Test
    androidTestImplementation "com.android.support:support-annotations:$support_version"
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    // Optional -- Hamcrest library
    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
    // Optional -- UI testing with Espresso
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    // Optional -- UI testing with UI Automator
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'
    // Robolectric
    testImplementation "org.robolectric:robolectric:3.3.2"

}

/**
 * Loads property from gradle.properties and ~/.gradle/gradle.properties
 * Use to look up confidential information like keys that shoudln't be stored publicly
 * @param name to lookup
 * @return the value of the property or "MISSING"
 */
def loadSecret(String name) {
    return hasProperty(name) ? getProperty(name) : "MISSING"
}